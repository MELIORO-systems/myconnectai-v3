// Settings Manager - Spr√°va nastaven√≠ aplikace
// Verze: 1.0 - Jednodu≈°≈°√≠ verze pro MyConnectAI v3

class SettingsManager {
    constructor() {
        this.isOpen = false;
        this.hasUnsavedChanges = false;
        this.selectedTheme = null;
        this.selectedModel = null;
    }

    // Otev≈ô√≠t nastaven√≠
    open() {
        const modal = document.getElementById('settings-modal');
        if (!modal) {
            console.error('Settings modal not found');
            return;
        }

        // Naƒç√≠st aktu√°ln√≠ hodnoty
        this.loadCurrentSettings();
        
        // Zobrazit modal
        modal.style.display = 'flex';
        this.isOpen = true;
        
        // Zav≈ô√≠t menu pokud je otev≈ôen√©
        if (window.uiManager) {
            window.uiManager.closeMenu();
        }
        
        console.log('‚öôÔ∏è Settings opened');
    }

    // Zav≈ô√≠t nastaven√≠
    close() {
        if (this.hasUnsavedChanges) {
            if (!confirm('M√°te neulo≈æen√© zmƒõny. Opravdu chcete zav≈ô√≠t nastaven√≠?')) {
                return;
            }
        }

        const modal = document.getElementById('settings-modal');
        if (modal) {
            modal.style.display = 'none';
        }
        
        this.isOpen = false;
        this.hasUnsavedChanges = false;
        this.clearStatus();
        
        console.log('‚öôÔ∏è Settings closed');
    }

    // Naƒç√≠st aktu√°ln√≠ nastaven√≠
    loadCurrentSettings() {
        // Model selector
        this.loadModelSelector();
        
        // Theme selector
        this.loadThemeSelector();
        
        // API kl√≠ƒçe
        this.loadApiKeys();
        
        // Specifick√° nastaven√≠ model≈Ø
        this.loadModelSpecificSettings();
        
        // Reset change tracking
        this.hasUnsavedChanges = false;
        this.updateSaveButton();
    }

    // Naƒç√≠st model selector
    loadModelSelector() {
        const select = document.getElementById('model-select');
        if (!select || !window.modelManager) return;

        // Vyƒçistit existuj√≠c√≠ options
        select.innerHTML = '';

        // Z√≠skat dostupn√© modely
        const models = window.modelManager.getAvailableModels();
        const activeModel = window.modelManager.getActiveModel();

        // P≈ôidat modely do selectu
        models.forEach(model => {
            const option = document.createElement('option');
            option.value = model.id;
            option.textContent = `${model.name} ${model.hasApiKey ? '‚úÖ' : '‚ùå'}`;
            option.disabled = !model.hasApiKey;
            
            if (activeModel && activeModel.id === model.id) {
                option.selected = true;
                this.selectedModel = model.id;
            }
            
            select.appendChild(option);
        });

        // Event listener
        select.onchange = () => {
            this.selectedModel = select.value;
            this.markAsChanged();
            this.updateModelSpecificSettings();
        };
    }

    // Naƒç√≠st theme selector
    loadThemeSelector() {
        const currentTheme = localStorage.getItem(CONFIG.STORAGE.PREFIX + CONFIG.STORAGE.KEYS.SELECTED_THEME) || CONFIG.UI.DEFAULT_THEME;
        this.selectedTheme = currentTheme;

        // Aktivovat spr√°vn√© tlaƒç√≠tko
        document.querySelectorAll('.theme-btn').forEach(btn => {
            const theme = btn.dataset.theme;
            if (theme === currentTheme) {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }

            // Event listener
            btn.onclick = () => {
                document.querySelectorAll('.theme-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                this.selectedTheme = theme;
                this.markAsChanged();
            };
        });
    }

    // Naƒç√≠st API kl√≠ƒçe
    loadApiKeys() {
        // OpenAI
        this.loadApiKey('openai', CONFIG.STORAGE.KEYS.OPENAI_KEY);
        
        // Anthropic
        this.loadApiKey('anthropic', CONFIG.STORAGE.KEYS.ANTHROPIC_KEY);
        
        // Google
        this.loadApiKey('google', CONFIG.STORAGE.KEYS.GOOGLE_KEY);
    }

    // Naƒç√≠st jednotliv√Ω API kl√≠ƒç
    loadApiKey(provider, storageKey) {
        const input = document.getElementById(`${provider}-api-key`);
        if (!input) return;

        // Pokud existuje ulo≈æen√Ω kl√≠ƒç, zobrazit placeholder
        const savedKey = security.loadSecure(storageKey);
        if (savedKey) {
            input.value = '';
            input.placeholder = '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢ (ulo≈æeno)';
        } else {
            input.value = '';
            input.placeholder = this.getApiKeyPlaceholder(provider);
        }

        // Event listener
        input.onchange = () => this.markAsChanged();
    }

    // Z√≠skat placeholder pro API kl√≠ƒç
    getApiKeyPlaceholder(provider) {
        const placeholders = {
            'openai': 'sk-...',
            'anthropic': 'sk-ant-...',
            'google': 'AIza...'
        };
        return placeholders[provider] || 'API Key';
    }

    // Naƒç√≠st specifick√° nastaven√≠ model≈Ø
    loadModelSpecificSettings() {
        // OpenAI Assistant ID
        const assistantIdInput = document.getElementById('openai-assistant-id');
        if (assistantIdInput) {
            const savedId = localStorage.getItem(CONFIG.STORAGE.PREFIX + CONFIG.STORAGE.KEYS.OPENAI_ASSISTANT_ID);
            assistantIdInput.value = savedId || '';
            assistantIdInput.onchange = () => this.markAsChanged();
        }

        // Zobrazit/skr√Ωt podle vybran√©ho modelu
        this.updateModelSpecificSettings();
    }

    // Aktualizovat zobrazen√≠ specifick√Ωch nastaven√≠
    updateModelSpecificSettings() {
        const openaiSettings = document.getElementById('openai-settings');
        
        if (this.selectedModel && this.selectedModel.startsWith('gpt-')) {
            openaiSettings.style.display = 'block';
        } else {
            openaiSettings.style.display = 'none';
        }
    }

    // Oznaƒçit jako zmƒõnƒõno
    markAsChanged() {
        this.hasUnsavedChanges = true;
        this.updateSaveButton();
    }

    // Aktualizovat save button
    updateSaveButton() {
        const saveButton = document.querySelector('.save-button');
        if (!saveButton) return;

        if (this.hasUnsavedChanges) {
            saveButton.classList.add('has-changes');
            saveButton.textContent = 'Ulo≈æit nastaven√≠ *';
        } else {
            saveButton.classList.remove('has-changes');
            saveButton.textContent = 'Ulo≈æit nastaven√≠';
        }
    }

    // Ulo≈æit nastaven√≠
    async save() {
        try {
            console.log('üíæ Saving settings...');

            // 1. Ulo≈æit vybran√Ω model
            if (this.selectedModel && window.modelManager) {
                await window.modelManager.setActiveModel(this.selectedModel);
            }

            // 2. Ulo≈æit t√©ma
            if (this.selectedTheme && window.uiManager) {
                window.uiManager.setTheme(this.selectedTheme);
            }

            // 3. Ulo≈æit API kl√≠ƒçe
            await this.saveApiKeys();

            // 4. Ulo≈æit specifick√° nastaven√≠
            this.saveModelSpecificSettings();

            // Reset zmƒõn
            this.hasUnsavedChanges = false;
            this.updateSaveButton();

            // Zobrazit √∫spƒõch
            this.showStatus('success', CONFIG.MESSAGES.SETTINGS_SAVED);

            // Zav≈ô√≠t po 2 sekund√°ch
            setTimeout(() => {
                this.close();
            }, 2000);

        } catch (error) {
            console.error('‚ùå Error saving settings:', error);
            this.showStatus('error', CONFIG.MESSAGES.SETTINGS_SAVE_ERROR);
        }
    }

    // Ulo≈æit API kl√≠ƒçe
    async saveApiKeys() {
        // OpenAI
        await this.saveApiKey('openai', CONFIG.STORAGE.KEYS.OPENAI_KEY);
        
        // Anthropic
        await this.saveApiKey('anthropic', CONFIG.STORAGE.KEYS.ANTHROPIC_KEY);
        
        // Google
        await this.saveApiKey('google', CONFIG.STORAGE.KEYS.GOOGLE_KEY);
    }

    // Ulo≈æit jednotliv√Ω API kl√≠ƒç
    async saveApiKey(provider, storageKey) {
        const input = document.getElementById(`${provider}-api-key`);
        if (!input || !input.value.trim()) return;

        const apiKey = input.value.trim();
        
        // Validace form√°tu
        if (!this.validateApiKey(provider, apiKey)) {
            throw new Error(`Neplatn√Ω form√°t API kl√≠ƒçe pro ${provider}`);
        }

        // Ulo≈æit
        security.saveSecure(storageKey, apiKey);
        console.log(`‚úÖ ${provider} API key saved`);
    }

    // Validace API kl√≠ƒçe
    validateApiKey(provider, apiKey) {
        const patterns = CONFIG.VALIDATION.API_KEY_PATTERNS;
        
        switch (provider) {
            case 'openai':
                return patterns.OPENAI.test(apiKey);
            case 'anthropic':
                return patterns.ANTHROPIC.test(apiKey);
            case 'google':
                return patterns.GOOGLE.test(apiKey);
            default:
                return true;
        }
    }

    // Ulo≈æit specifick√° nastaven√≠ model≈Ø
    saveModelSpecificSettings() {
        // OpenAI Assistant ID
        const assistantIdInput = document.getElementById('openai-assistant-id');
        if (assistantIdInput && assistantIdInput.value.trim()) {
            localStorage.setItem(
                CONFIG.STORAGE.PREFIX + CONFIG.STORAGE.KEYS.OPENAI_ASSISTANT_ID,
                assistantIdInput.value.trim()
            );
        }
    }

    // Test API kl√≠ƒçe
    async testApiKey(provider) {
        const input = document.getElementById(`${provider}-api-key`);
        if (!input) return;

        // Z√≠skat kl√≠ƒç (buƒè nov√Ω nebo ulo≈æen√Ω)
        let apiKey = input.value.trim();
        if (!apiKey) {
            const storageKey = {
                'openai': CONFIG.STORAGE.KEYS.OPENAI_KEY,
                'anthropic': CONFIG.STORAGE.KEYS.ANTHROPIC_KEY,
                'google': CONFIG.STORAGE.KEYS.GOOGLE_KEY
            }[provider];
            
            apiKey = security.loadSecure(storageKey);
        }

        if (!apiKey) {
            this.showStatus('error', 'Nejprve zadejte API kl√≠ƒç');
            return;
        }

        // Zobrazit loading
        this.showStatus('info', 'Testov√°n√≠ API kl√≠ƒçe...');

        try {
            const isValid = await window.modelManager.testApiKey(provider, apiKey);
            
            if (isValid) {
                this.showStatus('success', CONFIG.MESSAGES.API_KEY_VALID);
            } else {
                this.showStatus('error', CONFIG.MESSAGES.API_KEY_INVALID);
            }
        } catch (error) {
            this.showStatus('error', `Test selhal: ${error.message}`);
        }
    }

    // Export konfigurace
    async exportConfig() {
        try {
            const config = {
                version: CONFIG.EXPORT.FORMAT_VERSION,
                timestamp: new Date().toISOString(),
                settings: {
                    theme: localStorage.getItem(CONFIG.STORAGE.PREFIX + CONFIG.STORAGE.KEYS.SELECTED_THEME),
                    selectedModel: localStorage.getItem(CONFIG.STORAGE.PREFIX + CONFIG.STORAGE.KEYS.SELECTED_MODEL),
                    visibleModels: localStorage.getItem(CONFIG.STORAGE.PREFIX + CONFIG.STORAGE.KEYS.USER_VISIBLE_MODELS),
                    assistantId: localStorage.getItem(CONFIG.STORAGE.PREFIX + CONFIG.STORAGE.KEYS.OPENAI_ASSISTANT_ID)
                }
            };

            // Zeptat se na heslo
            const password = prompt('Zadejte heslo pro zabezpeƒçen√≠ exportu:');
            if (!password) return;

            // P≈ôidat API kl√≠ƒçe pokud je to povoleno
            if (CONFIG.EXPORT.INCLUDE.API_KEYS) {
                config.apiKeys = security.exportSecureData(password);
            }

            // Vytvo≈ôit blob a st√°hnout
            const dataStr = JSON.stringify(config, null, 2);
            const blob = new Blob([dataStr], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `${CONFIG.EXPORT.FILENAME_PREFIX}-${Date.now()}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);

            this.showStatus('success', CONFIG.MESSAGES.EXPORT_SUCCESS);
        } catch (error) {
            console.error('Export error:', error);
            this.showStatus('error', 'Export selhal');
        }
    }

    // Import konfigurace
    async importConfig() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        
        input.onchange = async (e) => {
            const file = e.target.files[0];
            if (!file) return;

            try {
                const text = await file.text();
                const config = JSON.parse(text);

                // Ovƒõ≈ôit verzi
                if (config.version !== CONFIG.EXPORT.FORMAT_VERSION) {
                    throw new Error('Nepodporovan√° verze konfigurace');
                }

                // Zeptat se na heslo pokud obsahuje API kl√≠ƒçe
                if (config.apiKeys) {
                    const password = prompt('Zadejte heslo pro import:');
                    if (!password) return;

                    // Import API kl√≠ƒç≈Ø
                    const imported = security.importSecureData(config.apiKeys, password);
                    if (!imported) {
                        throw new Error('Nespr√°vn√© heslo');
                    }
                }

                // Import nastaven√≠
                if (config.settings) {
                    Object.entries(config.settings).forEach(([key, value]) => {
                        if (value !== null && value !== undefined) {
                            localStorage.setItem(CONFIG.STORAGE.PREFIX + key, value);
                        }
                    });
                }

                this.showStatus('success', CONFIG.MESSAGES.IMPORT_SUCCESS);

                // Reload po 2 sekund√°ch
                setTimeout(() => {
                    location.reload();
                }, 2000);

            } catch (error) {
                console.error('Import error:', error);
                this.showStatus('error', CONFIG.MESSAGES.IMPORT_ERROR);
            }
        };

        input.click();
    }

    // Zobrazit status
    showStatus(type, message) {
        const statusDiv = document.getElementById('settings-status');
        if (!statusDiv) return;

        statusDiv.className = `settings-status ${type}`;
        statusDiv.textContent = message;
        statusDiv.style.display = 'block';

        // Automaticky skr√Ωt po 5 sekund√°ch
        setTimeout(() => {
            this.clearStatus();
        }, 5000);
    }

    // Vyƒçistit status
    clearStatus() {
        const statusDiv = document.getElementById('settings-status');
        if (statusDiv) {
            statusDiv.style.display = 'none';
            statusDiv.className = 'settings-status';
            statusDiv.textContent = '';
        }
    }
}

// Vytvo≈ôit glob√°ln√≠ instanci
window.settingsManager = new SettingsManager();

console.log('‚öôÔ∏è Settings Manager loaded');
