// Security Manager - Jednoduch√° obousmƒõrn√° ≈°ifrovac√≠ funkce
// Pou≈æ√≠v√° XOR ≈°ifrov√°n√≠ s unik√°tn√≠m kl√≠ƒçem pro ka≈æd√© za≈ô√≠zen√≠

class SecurityManager {
    constructor() {
        // Generovat nebo naƒç√≠st unik√°tn√≠ kl√≠ƒç pro tento prohl√≠≈æeƒç
        this.deviceKey = this.getOrCreateDeviceKey();
        console.log('üîê Security Manager initialized');
    }
    
    // Z√≠skat nebo vytvo≈ôit unik√°tn√≠ kl√≠ƒç za≈ô√≠zen√≠
    getOrCreateDeviceKey() {
        const keyName = CONFIG.STORAGE.PREFIX + CONFIG.STORAGE.KEYS.DEVICE_KEY;
        let key = localStorage.getItem(keyName);
        
        if (!key) {
            // Generovat n√°hodn√Ω kl√≠ƒç
            key = this.generateKey();
            localStorage.setItem(keyName, key);
            console.log('üîë New device key generated');
        }
        
        return key;
    }
    
    // Generovat n√°hodn√Ω kl√≠ƒç
    generateKey() {
        const array = new Uint8Array(32);
        crypto.getRandomValues(array);
        return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');
    }
    
    // Jednoduch√° XOR ≈°ifra s kl√≠ƒçem
    encrypt(text, key = null) {
        if (!text) return '';
        
        const encryptionKey = key || this.deviceKey;
        let result = '';
        
        for (let i = 0; i < text.length; i++) {
            result += String.fromCharCode(
                text.charCodeAt(i) ^ encryptionKey.charCodeAt(i % encryptionKey.length)
            );
        }
        
        // Base64 encode pro bezpeƒçn√© ulo≈æen√≠
        return btoa(result);
    }
    
    // De≈°ifrov√°n√≠
    decrypt(encoded, key = null) {
        if (!encoded) return '';
        
        try {
            const encryptionKey = key || this.deviceKey;
            const text = atob(encoded); // Base64 decode
            let result = '';
            
            for (let i = 0; i < text.length; i++) {
                result += String.fromCharCode(
                    text.charCodeAt(i) ^ encryptionKey.charCodeAt(i % encryptionKey.length)
                );
            }
            
            return result;
        } catch (e) {
            console.error('Decryption error:', e);
            return '';
        }
    }
    
    // Ulo≈æit zabezpeƒçenou hodnotu
    saveSecure(key, value) {
        if (!value) {
            this.removeSecure(key);
            return;
        }
        
        const encrypted = this.encrypt(value);
        const storageKey = CONFIG.STORAGE.PREFIX + key;
        localStorage.setItem(storageKey, encrypted);
    }
    
    // Naƒç√≠st zabezpeƒçenou hodnotu
    loadSecure(key) {
        const storageKey = CONFIG.STORAGE.PREFIX + key;
        const encrypted = localStorage.getItem(storageKey);
        return this.decrypt(encrypted);
    }
    
    // Odstranit zabezpeƒçenou hodnotu
    removeSecure(key) {
        const storageKey = CONFIG.STORAGE.PREFIX + key;
        localStorage.removeItem(storageKey);
    }
    
    // Vymazat v≈°echny zabezpeƒçen√© hodnoty
    clearAllSecure() {
        const prefix = CONFIG.STORAGE.PREFIX;
        const keys = Object.keys(localStorage);
        
        keys.forEach(key => {
            if (key.startsWith(prefix)) {
                localStorage.removeItem(key);
            }
        });
        
        console.log('üóëÔ∏è All secure data cleared');
    }
    
    // Export v≈°ech zabezpeƒçen√Ωch dat
    exportSecureData(password) {
        const data = {};
        const prefix = CONFIG.STORAGE.PREFIX;
        
        // Z√≠skat v≈°echny zabezpeƒçen√© kl√≠ƒçe
        Object.keys(localStorage).forEach(key => {
            if (key.startsWith(prefix) && key !== prefix + CONFIG.STORAGE.KEYS.DEVICE_KEY) {
                const cleanKey = key.replace(prefix, '');
                const value = this.loadSecure(cleanKey);
                if (value) {
                    data[cleanKey] = value;
                }
            }
        });
        
        // Za≈°ifrovat cel√Ω export heslem
        const jsonData = JSON.stringify(data);
        return this.encrypt(jsonData, password);
    }
    
    // Import zabezpeƒçen√Ωch dat
    importSecureData(encryptedData, password) {
        try {
            // De≈°ifrovat pomoc√≠ hesla
            const jsonData = this.decrypt(encryptedData, password);
            const data = JSON.parse(jsonData);
            
            // Ulo≈æit v≈°echna data
            Object.keys(data).forEach(key => {
                this.saveSecure(key, data[key]);
            });
            
            return true;
        } catch (e) {
            console.error('Import error:', e);
            return false;
        }
    }
    
    // Validace s√≠ly hesla
    validatePassword(password) {
        if (!password || password.length < 6) {
            return {
                valid: false,
                message: 'Heslo mus√≠ m√≠t alespo≈à 6 znak≈Ø'
            };
        }
        
        // Kontrola slo≈æitosti
        const hasLower = /[a-z]/.test(password);
        const hasUpper = /[A-Z]/.test(password);
        const hasNumber = /[0-9]/.test(password);
        const hasSpecial = /[^a-zA-Z0-9]/.test(password);
        
        const complexity = [hasLower, hasUpper, hasNumber, hasSpecial].filter(x => x).length;
        
        if (complexity < 2) {
            return {
                valid: false,
                message: 'Heslo je p≈ô√≠li≈° jednoduch√©. Pou≈æijte kombinaci p√≠smen, ƒç√≠slic a znak≈Ø.'
            };
        }
        
        return {
            valid: true,
            strength: complexity >= 4 ? 'strong' : complexity >= 3 ? 'medium' : 'weak'
        };
    }
    
    // Hash hesla pro porovn√°n√≠ (jednosmƒõrn√Ω)
    async hashPassword(password) {
        const encoder = new TextEncoder();
        const data = encoder.encode(password + this.deviceKey);
        const hashBuffer = await crypto.subtle.digest('SHA-256', data);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    }
    
    // Ovƒõ≈ôit, zda jsou nƒõjak√° data za≈°ifrov√°na
    hasSecureData() {
        const prefix = CONFIG.STORAGE.PREFIX;
        return Object.keys(localStorage).some(key => 
            key.startsWith(prefix) && key !== prefix + CONFIG.STORAGE.KEYS.DEVICE_KEY
        );
    }
    
    // Z√≠skat seznam v≈°ech zabezpeƒçen√Ωch kl√≠ƒç≈Ø
    getSecureKeys() {
        const prefix = CONFIG.STORAGE.PREFIX;
        const keys = [];
        
        Object.keys(localStorage).forEach(key => {
            if (key.startsWith(prefix) && key !== prefix + CONFIG.STORAGE.KEYS.DEVICE_KEY) {
                keys.push(key.replace(prefix, ''));
            }
        });
        
        return keys;
    }
}

// Vytvo≈ôit glob√°ln√≠ instanci
const security = new SecurityManager();

// Export pro ostatn√≠ moduly
window.security = security;

console.log('üîê Security Manager loaded');
