// Security Manager - Vylep≈°en√° bezpeƒçnost s Web Crypto API
// Pou≈æ√≠v√° AES-GCM ≈°ifrov√°n√≠ m√≠sto XOR
// Verze: 2.0 - Opraven√° bez duplikac√≠ metod

class SecurityManager {
    constructor() {
        this.deviceKey = null;
        this.cryptoKey = null;
        this.initialized = false;
        console.log('üîê Security Manager initializing...');
        this.initialize();
    }
    
    // Asynchronn√≠ inicializace
    async initialize() {
        try {
            await this.getOrCreateDeviceKey();
            this.initialized = true;
            console.log('üîê Security Manager initialized');
        } catch (error) {
            console.error('üîê Security Manager initialization failed:', error);
        }
    }
    
    // Z√≠skat nebo vytvo≈ôit unik√°tn√≠ kl√≠ƒç za≈ô√≠zen√≠
    async getOrCreateDeviceKey() {
        const keyName = CONFIG.STORAGE.PREFIX + CONFIG.STORAGE.KEYS.DEVICE_KEY;
        let keyData = localStorage.getItem(keyName);
        
        // Ovƒõ≈ôit ≈æe kl√≠ƒç je v spr√°vn√©m form√°tu
        let validKey = false;
        if (keyData) {
            try {
                const keyObj = JSON.parse(keyData);
                // Validovat ≈æe je to spr√°vn√Ω JWK objekt
                validKey = keyObj.kty && keyObj.k && keyObj.alg;
            } catch (e) {
                // Nen√≠ validn√≠ JSON
                validKey = false;
            }
        }
        
        if (!keyData || !validKey) {
            // Vyƒçistit p≈ô√≠padn√° star√° data
            if (keyData && !validKey) {
                console.log('üßπ Removing invalid/old device key');
                localStorage.removeItem(keyName);
            }
            
            // Generovat nov√Ω kl√≠ƒç
            this.cryptoKey = await crypto.subtle.generateKey(
                {
                    name: 'AES-GCM',
                    length: 256
                },
                true,
                ['encrypt', 'decrypt']
            );
            
            // Exportovat kl√≠ƒç pro ulo≈æen√≠
            const exportedKey = await crypto.subtle.exportKey('jwk', this.cryptoKey);
            localStorage.setItem(keyName, JSON.stringify(exportedKey));
            console.log('üîë New device key generated');
        } else {
            // Naƒç√≠st existuj√≠c√≠ validn√≠ kl√≠ƒç
            const keyObj = JSON.parse(keyData);
            this.cryptoKey = await crypto.subtle.importKey(
                'jwk',
                keyObj,
                {
                    name: 'AES-GCM',
                    length: 256
                },
                true,
                ['encrypt', 'decrypt']
            );
            console.log('üîë Existing device key loaded');
        }
    }
    
    // ƒåekat na inicializaci
    async waitForInit() {
        if (this.initialized) return;
        
        // Poƒçkat max 5 sekund
        for (let i = 0; i < 50; i++) {
            if (this.initialized) return;
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        throw new Error('Security Manager initialization timeout');
    }
    
    // Modern√≠ ≈°ifrov√°n√≠ pomoc√≠ AES-GCM
    async encrypt(text) {
        if (!text) return '';
        
        await this.waitForInit();
        
        try {
            // P≈ôev√©st text na ArrayBuffer
            const encoder = new TextEncoder();
            const data = encoder.encode(text);
            
            // Generovat n√°hodn√© IV (initialization vector)
            const iv = crypto.getRandomValues(new Uint8Array(12));
            
            // ≈†ifrovat data
            const encryptedBuffer = await crypto.subtle.encrypt(
                {
                    name: 'AES-GCM',
                    iv: iv
                },
                this.cryptoKey,
                data
            );
            
            // Spojit IV a ≈°ifrovan√° data
            const combined = new Uint8Array(iv.length + encryptedBuffer.byteLength);
            combined.set(iv, 0);
            combined.set(new Uint8Array(encryptedBuffer), iv.length);
            
            // P≈ôev√©st na base64
            return btoa(String.fromCharCode(...combined));
        } catch (error) {
            console.error('Encryption error:', error);
            throw new Error('Failed to encrypt data');
        }
    }
    
    // De≈°ifrov√°n√≠
    async decrypt(encoded) {
        if (!encoded) return '';
        
        await this.waitForInit();
        
        try {
            // Dek√≥dovat z base64
            const combined = Uint8Array.from(atob(encoded), c => c.charCodeAt(0));
            
            // Rozdƒõlit IV a data
            const iv = combined.slice(0, 12);
            const encryptedData = combined.slice(12);
            
            // De≈°ifrovat
            const decryptedBuffer = await crypto.subtle.decrypt(
                {
                    name: 'AES-GCM',
                    iv: iv
                },
                this.cryptoKey,
                encryptedData
            );
            
            // P≈ôev√©st zpƒõt na text
            const decoder = new TextDecoder();
            return decoder.decode(decryptedBuffer);
        } catch (error) {
            console.error('Decryption error:', error);
            return '';
        }
    }
    
    // Ulo≈æit zabezpeƒçenou hodnotu
    async saveSecure(key, value) {
        if (!value) {
            this.removeSecure(key);
            return;
        }
        
        try {
            const encrypted = await this.encrypt(value);
            const storageKey = CONFIG.STORAGE.PREFIX + key;
            localStorage.setItem(storageKey, encrypted);
        } catch (error) {
            console.error('Save secure error:', error);
            throw error;
        }
    }
    
    // Naƒç√≠st zabezpeƒçenou hodnotu
    async loadSecure(key) {
        const storageKey = CONFIG.STORAGE.PREFIX + key;
        const encrypted = localStorage.getItem(storageKey);
        
        if (!encrypted) return null;
        
        try {
            return await this.decrypt(encrypted);
        } catch (error) {
            console.error('Load secure error:', error);
            return null;
        }
    }
    
    // Odstranit zabezpeƒçenou hodnotu
    removeSecure(key) {
        const storageKey = CONFIG.STORAGE.PREFIX + key;
        localStorage.removeItem(storageKey);
    }
    
    // Vymazat v≈°echny zabezpeƒçen√© hodnoty
    clearAllSecure() {
        const prefix = CONFIG.STORAGE.PREFIX;
        const keys = Object.keys(localStorage);
        
        keys.forEach(key => {
            if (key.startsWith(prefix) && key !== prefix + CONFIG.STORAGE.KEYS.DEVICE_KEY) {
                localStorage.removeItem(key);
            }
        });
        
        console.log('üóëÔ∏è All secure data cleared');
    }
    
    // Export v≈°ech zabezpeƒçen√Ωch dat
    async exportSecureData(password) {
        const data = {};
        const prefix = CONFIG.STORAGE.PREFIX;
        
        // Z√≠skat v≈°echny zabezpeƒçen√© kl√≠ƒçe
        for (const key of Object.keys(localStorage)) {
            if (key.startsWith(prefix) && key !== prefix + CONFIG.STORAGE.KEYS.DEVICE_KEY) {
                const cleanKey = key.replace(prefix, '');
                const value = await this.loadSecure(cleanKey);
                if (value) {
                    data[cleanKey] = value;
                }
            }
        }
        
        // Vytvo≈ôit doƒçasn√Ω kl√≠ƒç z hesla
        const passwordKey = await this.deriveKeyFromPassword(password);
        
        // Za≈°ifrovat data pomoc√≠ password-based kl√≠ƒçe
        const jsonData = JSON.stringify(data);
        const encoder = new TextEncoder();
        const dataBuffer = encoder.encode(jsonData);
        
        // IV pro password-based ≈°ifrov√°n√≠
        const iv = crypto.getRandomValues(new Uint8Array(12));
        
        // Salt pro odvozen√≠ kl√≠ƒçe
        const salt = crypto.getRandomValues(new Uint8Array(16));
        
        // ≈†ifrovat
        const encrypted = await crypto.subtle.encrypt(
            {
                name: 'AES-GCM',
                iv: iv
            },
            passwordKey.key,
            dataBuffer
        );
        
        // Kombinovat salt, IV a data
        const combined = new Uint8Array(salt.length + iv.length + encrypted.byteLength);
        combined.set(salt, 0);
        combined.set(iv, salt.length);
        combined.set(new Uint8Array(encrypted), salt.length + iv.length);
        
        return btoa(String.fromCharCode(...combined));
    }
    
    // Import zabezpeƒçen√Ωch dat
    async importSecureData(encryptedData, password) {
        try {
            // Dek√≥dovat
            const combined = Uint8Array.from(atob(encryptedData), c => c.charCodeAt(0));
            
            // Rozdƒõlit salt, IV a data
            const salt = combined.slice(0, 16);
            const iv = combined.slice(16, 28);
            const encrypted = combined.slice(28);
            
            // Odvodit kl√≠ƒç z hesla
            const passwordKey = await this.deriveKeyFromPassword(password, salt);
            
            // De≈°ifrovat
            const decrypted = await crypto.subtle.decrypt(
                {
                    name: 'AES-GCM',
                    iv: iv
                },
                passwordKey.key,
                encrypted
            );
            
            // Parsovat JSON
            const decoder = new TextDecoder();
            const jsonData = decoder.decode(decrypted);
            const data = JSON.parse(jsonData);
            
            // Ulo≈æit v≈°echna data
            for (const [key, value] of Object.entries(data)) {
                await this.saveSecure(key, value);
            }
            
            return true;
        } catch (error) {
            console.error('Import error:', error);
            return false;
        }
    }
    
    // Odvodit kl√≠ƒç z hesla
    async deriveKeyFromPassword(password, salt = null) {
        const encoder = new TextEncoder();
        const passwordBuffer = encoder.encode(password);
        
        // Pou≈æ√≠t poskytnut√Ω salt nebo vygenerovat nov√Ω
        const saltBuffer = salt || crypto.getRandomValues(new Uint8Array(16));
        
        // Import hesla jako kl√≠ƒç
        const passwordKey = await crypto.subtle.importKey(
            'raw',
            passwordBuffer,
            'PBKDF2',
            false,
            ['deriveKey']
        );
        
        // Odvodit AES kl√≠ƒç
        const key = await crypto.subtle.deriveKey(
            {
                name: 'PBKDF2',
                salt: saltBuffer,
                iterations: 100000,
                hash: 'SHA-256'
            },
            passwordKey,
            {
                name: 'AES-GCM',
                length: 256
            },
            true,
            ['encrypt', 'decrypt']
        );
        
        return { key, salt: saltBuffer };
    }
    
    // Validace s√≠ly hesla
    validatePassword(password) {
        if (!password || password.length < 8) {
            return {
                valid: false,
                message: 'Heslo mus√≠ m√≠t alespo≈à 8 znak≈Ø'
            };
        }
        
        // Kontrola slo≈æitosti
        const hasLower = /[a-z]/.test(password);
        const hasUpper = /[A-Z]/.test(password);
        const hasNumber = /[0-9]/.test(password);
        const hasSpecial = /[^a-zA-Z0-9]/.test(password);
        
        const complexity = [hasLower, hasUpper, hasNumber, hasSpecial].filter(x => x).length;
        
        if (complexity < 3) {
            return {
                valid: false,
                message: 'Heslo mus√≠ obsahovat alespo≈à 3 z n√°sleduj√≠c√≠ch: mal√° p√≠smena, velk√° p√≠smena, ƒç√≠sla, speci√°ln√≠ znaky'
            };
        }
        
        return {
            valid: true,
            strength: complexity === 4 ? 'strong' : 'medium'
        };
    }
    
    // Hash hesla pro porovn√°n√≠ (jednosmƒõrn√Ω)
    async hashPassword(password) {
        const encoder = new TextEncoder();
        const data = encoder.encode(password);
        const hashBuffer = await crypto.subtle.digest('SHA-256', data);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    }
    
    // Ovƒõ≈ôit, zda jsou nƒõjak√° data za≈°ifrov√°na
    hasSecureData() {
        const prefix = CONFIG.STORAGE.PREFIX;
        return Object.keys(localStorage).some(key => 
            key.startsWith(prefix) && key !== prefix + CONFIG.STORAGE.KEYS.DEVICE_KEY
        );
    }
    
    // Z√≠skat seznam v≈°ech zabezpeƒçen√Ωch kl√≠ƒç≈Ø
    getSecureKeys() {
        const prefix = CONFIG.STORAGE.PREFIX;
        const keys = [];
        
        Object.keys(localStorage).forEach(key => {
            if (key.startsWith(prefix) && key !== prefix + CONFIG.STORAGE.KEYS.DEVICE_KEY) {
                keys.push(key.replace(prefix, ''));
            }
        });
        
        return keys;
    }
    
    // Helper metoda pro rychlou kontrolu existence kl√≠ƒçe (bez de≈°ifrov√°n√≠)
    hasKey(key) {
        const storageKey = CONFIG.STORAGE.PREFIX + key;
        return localStorage.getItem(storageKey) !== null;
    }
}

// Vytvo≈ôit glob√°ln√≠ instanci
const security = new SecurityManager();

// Export pro ostatn√≠ moduly
window.security = security;

console.log('üîê Security Manager loaded (v2.0 - Fixed)');
